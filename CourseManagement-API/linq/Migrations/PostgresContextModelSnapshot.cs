// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using linq.model;

#nullable disable

namespace linq.Migrations
{
    [DbContext(typeof(PostgresContext))]
    partial class PostgresContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "auth", "aal_level", new[] { "aal1", "aal2", "aal3" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "auth", "code_challenge_method", new[] { "s256", "plain" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "auth", "factor_status", new[] { "unverified", "verified" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "auth", "factor_type", new[] { "totp", "webauthn" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "pgsodium", "key_status", new[] { "default", "valid", "invalid", "expired" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "pgsodium", "key_type", new[] { "aead-ietf", "aead-det", "hmacsha512", "hmacsha256", "auth", "shorthash", "generichash", "kdf", "secretbox", "secretstream", "stream_xchacha20" });
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "extensions", "pg_stat_statements");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "extensions", "pgcrypto");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "extensions", "pgjwt");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "extensions", "uuid-ossp");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "graphql", "pg_graphql");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "pgsodium", "pgsodium");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "vault", "supabase_vault");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId")
                        .HasName("AspNetUserRoles_pkey");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("linq.model.AspNetRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id")
                        .HasName("AspNetRoles_pkey");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("linq.model.AspNetRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("AspNetRoleClaims_pkey");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("linq.model.AspNetUser", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool?>("IsStudent")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsTeacher")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id")
                        .HasName("AspNetUsers_pkey");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("linq.model.AspNetUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id")
                        .HasName("AspNetUserClaims_pkey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("linq.model.AspNetUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("AspNetUserLogins_pkey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("linq.model.AspNetUserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("AspNetUserTokens_pkey");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("linq.model.Course", b =>
                {
                    b.Property<string>("CourseId")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp(6) without time zone");

                    b.Property<string>("CreatedUserId")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp(6) without time zone");

                    b.Property<int?>("MaxStudentQuantity")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Price")
                        .HasPrecision(15, 5)
                        .HasColumnType("numeric(15,5)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp(6) without time zone");

                    b.Property<string>("TeacherId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("TeacherId ");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp(6) without time zone");

                    b.Property<string>("UpdatedUserId")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("CourseId")
                        .HasName("Courses_pkey");

                    b.HasIndex("TeacherId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("linq.model.CourseStudent", b =>
                {
                    b.Property<string>("CourseStudentId")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp(6) without time zone");

                    b.Property<string>("CreatedUserId")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp(6) without time zone");

                    b.Property<string>("UpdatedUserId")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("CourseStudentId")
                        .HasName("CourseStudents_pkey");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("CourseStudents");
                });

            modelBuilder.Entity("linq.model.Room", b =>
                {
                    b.Property<string>("RoomId")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp(6) without time zone");

                    b.Property<string>("CreatedUserId")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("RoomName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp(6) without time zone");

                    b.Property<string>("UpdatedUserId")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("RoomId")
                        .HasName("Rooms_pkey");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("linq.model.RoomCourse", b =>
                {
                    b.Property<string>("RoomCourseId")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp(6) without time zone");

                    b.Property<string>("CreatedUserId")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("RoomId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp(6) without time zone");

                    b.Property<string>("UpdatedUserId")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("RoomCourseId")
                        .HasName("RoomCourses_pkey");

                    b.HasIndex("CourseId");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomCourses");
                });

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.HasOne("linq.model.AspNetRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("AspNetUserRoles_RoleId_fkey");

                    b.HasOne("linq.model.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("AspNetUserRoles_UserId_fkey");
                });

            modelBuilder.Entity("linq.model.AspNetRoleClaim", b =>
                {
                    b.HasOne("linq.model.AspNetRole", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("AspNetRoleClaims_RoleId_fkey");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("linq.model.AspNetUserClaim", b =>
                {
                    b.HasOne("linq.model.AspNetUser", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("AspNetUserClaims_UserId_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("linq.model.AspNetUserLogin", b =>
                {
                    b.HasOne("linq.model.AspNetUser", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("AspNetUserLogins_UserId_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("linq.model.AspNetUserToken", b =>
                {
                    b.HasOne("linq.model.AspNetUser", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("AspNetUserTokens_UserId_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("linq.model.Course", b =>
                {
                    b.HasOne("linq.model.AspNetUser", "Teacher")
                        .WithMany("Courses")
                        .HasForeignKey("TeacherId")
                        .IsRequired()
                        .HasConstraintName("Courses_TeacherId _fkey");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("linq.model.CourseStudent", b =>
                {
                    b.HasOne("linq.model.Course", "Course")
                        .WithMany("CourseStudents")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("CourseStudents_CourseId_fkey");

                    b.HasOne("linq.model.AspNetUser", "Student")
                        .WithMany("CourseStudents")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("CourseStudents_StudentId_fkey");

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("linq.model.RoomCourse", b =>
                {
                    b.HasOne("linq.model.Course", "Course")
                        .WithMany("RoomCourses")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("RoomCourses_CourseId_fkey");

                    b.HasOne("linq.model.Room", "Room")
                        .WithMany("RoomCourses")
                        .HasForeignKey("RoomId")
                        .IsRequired()
                        .HasConstraintName("RoomCourses_RoomId_fkey");

                    b.Navigation("Course");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("linq.model.AspNetRole", b =>
                {
                    b.Navigation("AspNetRoleClaims");
                });

            modelBuilder.Entity("linq.model.AspNetUser", b =>
                {
                    b.Navigation("AspNetUserClaims");

                    b.Navigation("AspNetUserLogins");

                    b.Navigation("AspNetUserTokens");

                    b.Navigation("CourseStudents");

                    b.Navigation("Courses");
                });

            modelBuilder.Entity("linq.model.Course", b =>
                {
                    b.Navigation("CourseStudents");

                    b.Navigation("RoomCourses");
                });

            modelBuilder.Entity("linq.model.Room", b =>
                {
                    b.Navigation("RoomCourses");
                });
#pragma warning restore 612, 618
        }
    }
}
